name: CI

on:
  push:
    branches: [main]
    tags: [v*]
  pull_request:
  workflow_dispatch:
  schedule:
    # run every week (for --pre release tests)
    - cron: "0 0 * * 0"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-manifest:
    name: Check Manifest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - run: pipx run check-manifest

  test:
    name: ${{ matrix.platform }} (${{ matrix.python-version }}) [${{ matrix.resolution }}]
    runs-on: ${{ matrix.platform }}
    env:
      UV_PRERELEASE: ${{ github.event_name == 'schedule' && 'allow' || 'if-necessary-or-explicit' }}
      UV_RESOLUTION: ${{ matrix.resolution }}
      PYTEST_ADDOPTS: ${{ matrix.resolution == 'lowest-direct' && '-W ignore' || '' }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.11", "3.13"]
        platform: [ubuntu-latest, macos-latest, windows-latest]
        resolution: ["highest"]
        include:
          - python-version: "3.9"
            resolution: "lowest-direct"
            platform: macos-latest
          - python-version: "3.10"
            resolution: "lowest-direct"
            platform: windows-latest
          - python-version: "3.12"
            resolution: "lowest-direct"
            platform: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: üêç Set up Python ${{ matrix.python-version }}
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - uses: actions/cache@v4
        id: cache
        with:
          path: tests/data
          key: ${{ hashFiles('scripts/download_samples.py') }}

      - name: Download Samples
        if: steps.cache.outputs.cache-hit != 'true'
        run: uv run scripts/download_samples.py

      - name: üß™ Run Tests
        run: uv run --no-dev --group test coverage run -p -m pytest -v

      # If something goes wrong with --pre tests, we can open an issue in the repo
      - name: üìù Report --pre Failures
        if: failure() && github.event_name == 'schedule'
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PLATFORM: ${{ matrix.platform }}
          PYTHON: ${{ matrix.python-version }}
          RUN_ID: ${{ github.run_id }}
          TITLE: "[test-bot] pip install --pre is failing"
        with:
          filename: .github/TEST_FAIL_TEMPLATE.md
          update_existing: true

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: covreport-${{ matrix.platform }}-py${{ matrix.python-version }}-${{ matrix.resolution }}
          path: ./.coverage*
          include-hidden-files: true

  upload_coverage:
    if: always()
    needs: [test]
    uses: pyapp-kit/workflows/.github/workflows/upload-coverage.yml@v2
    secrets:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}

  benchmarks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6
        with:
          python-version: "3.11"
          enable-cache: true

      - uses: actions/cache@v4
        id: cache
        with:
          path: tests/data
          key: ${{ hashFiles('scripts/download_samples.py') }}

      - name: Download Samples
        if: steps.cache.outputs.cache-hit != 'true'
        run: uv run scripts/download_samples.py

      - name: Run benchmarks
        uses: CodSpeedHQ/action@v4
        with:
          run: uv run --no-dev --group test pytest -W ignore --codspeed -v --color=yes
          mode: instrumentation

  build-and-inspect-package:
    name: Build & inspect package.
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: hynek/build-and-inspect-python-package@v2

  upload-to-pypi:
    name: Upload package to PyPI
    needs: build-and-inspect-package
    if: success() && startsWith(github.ref, 'refs/tags/') && github.event_name != 'schedule'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write

    steps:
      - name: Download built artifact to dist/
        uses: actions/download-artifact@v5
        with:
          name: Packages
          path: dist
      - name: üö¢ Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
      - uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: "./dist/*"
